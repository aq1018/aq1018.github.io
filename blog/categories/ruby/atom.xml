<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | AQ]]></title>
  <link href="http://aq1018.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://aq1018.github.io/"/>
  <updated>2014-08-23T02:10:23-07:00</updated>
  <id>http://aq1018.github.io/</id>
  <author>
    <name><![CDATA[Aaron Qian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Streaming GeoJSON with GDAL, Rack::Chunked, and Rails Live Streaming]]></title>
    <link href="http://aq1018.github.io/blog/2014/08/22/streaming-geojson-with-gdal-rack-chunked-and-rails-live-streaming/"/>
    <updated>2014-08-22T22:02:45-07:00</updated>
    <id>http://aq1018.github.io/blog/2014/08/22/streaming-geojson-with-gdal-rack-chunked-and-rails-live-streaming</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>For you busy folks who just want it to work, here is the <a href="https://gist.github.com/aq1018/e3512f763d42ad8cf80b">gist</a>.</p>

<h2>Background</h2>

<p>A few weeks ago, I was at <a href="http://nationbuilder.com/">NationBuilder</a> building a <a href="http://geojson.org/">GeoJSON</a> API for organizers. The end goal for this project is to provide accurate political districting information through this API and exposes a map management interface for district updates.</p>

<h2>Application Architecture</h2>

<p>This application is built on top of the popular <a href="http://rubyonrails.org/">Ruby On Rails</a> framework, and uses <a href="http://postgis.net/">PostGIS</a> as geographic data storage backend. GeoJSON conversion is done by using <a href="https://github.com/rgeo/rgeo-geojson">rgeo-geojson</a> gem since it fits nicely with <a href="https://github.com/rgeo/activerecord-postgis-adapter">activerecord-postgis-adapter</a>.</p>

<h2>Performance Issues</h2>

<p>The application was initially running smoothly, but problems started to emerge when the generated GeoJSON data became larger over time. The API server would often time out, stop responding, or run out of memory when GeoJSON response size approached a couple MB under light load. As a result, map rendering became so slow and unstable, it was painful to use.</p>

<h3>Memory Bloat</h3>

<p>Our GeoJSON data was initially loaded from database by ActiveReocrd, and then converted into <code>RGeo::Geometry</code> objects. The entire dataset is buffered in memory. These objects are then converted into hashes with <code>rgeo-geojson</code>. These converted hashes represents takes up a lot of memory as well. Finally the resulting hashes are merged with other database properties and pushed on an array. All buffered in memory!</p>

<h3>Response Time</h3>

<p>The application spends the majority of its time converting <code>RGeo::Geometry</code> objects into GeoJSON hashes. The CPU will hit 100% and memory will steadily clime. Upon closer inspection, I found out that <code>rgeo-geojson</code> gem does the conversion entirely in Ruby! When the dataset gets too big, the browser or our proxy will either run out of patience and issue timeouts or our application process will have consumed so much memory it was killed by <a href="http://mmonit.com/monit/">monit</a>.</p>

<h3>Understanding Root Cause</h3>

<p>As all seasoned software engineers would do, I first analyzed the symptoms at hand and concluded the following root cause:</p>

<ul>
<li>GeoJSON rendering is too slow.</li>
<li>dataset buffering causes memory bloat.</li>
</ul>


<h2>Research, Research, Research!</h2>

<p>My initial effort was focused on solving the rendering speed issue. I know I cannot convert GeoJSON in ruby since ruby isn&rsquo;t exactly suitable for this kind of heavy duty data crunching when speed is a core requirement.</p>

<h3>The PostGIS route</h3>

<p>The immediate thought came to mind is to have PostGIS generating the GeoJSON for me, and I found out <a href="http://postgis.org/docs/ST_AsGeoJSON.html">st_asgeojson</a>. However, this doesn&rsquo;t solve my problem since I will have to convert the generated GeoJSON back into hashes and merge database properties. There&rsquo;s gotta be a better way!</p>

<h3>GDAL</h3>

<p>After some more research I found out a little commandline tool called <code>ogr2ogr</code> from the wonderful <a href="http://www.gdal.org/">GDAL</a> library. This tool can execute supplied SQL statements and convert the results into GeoJSON FeatureCollection. This is perfect!</p>

<p>Here is an example on how to use it:</p>

<p><code>
ogr2ogr -f GeoJSON /vsistdout/ \
  "PG:host=&lt;host&gt; dbname=&lt;dbname&gt; user=&lt;user&gt; password=&lt;password&gt;" \
  -sql "SELECT name, geom FROM regions LIMIT 100"
</code></p>

<p>The <code>-f</code> flag indicates the output format, in this case I used GeoJSON. <code>/vsistdout/</code> means I want to output the geojson directly to STDOUT.</p>

<p>I gave it a spin, and the rendering speed is blazing fast! Ok, I&rsquo;m sticking with it!</p>

<h3>Interfacing with Rails</h3>

<p>In order to construct the command, I need to convert an ActiveRecord Scope into SQL statements.</p>

<h3>SQL Statement</h3>

<p>This is easy enough. <code>#to_sql</code> method on ActiveRecord scope will do the trick. If you are using Rails 4, don&rsquo;t forget to wrap this method inside <code>scope.connection.unprepared_statement</code> block to generate the full statement.</p>

<p>Something simple like this would do:</p>

<p><code>ruby
def sql
  @scope.connection.unprepared_statement { @scope.to_sql }
end
</code></p>

<h3>DB Connection String</h3>

<p>The next step is to fetch the Rails database configuration and convert it into the db connection string expected by <code>ogr2ogr</code>. Here is a snippet:</p>

<p>```ruby
def conn_str
  db_config = Rails.configuration.database_configuration[Rails.env]</p>

<p>  host      = db_config[&lsquo;host&rsquo;]
  port      = db_config[&lsquo;port&rsquo;]
  database  = db_config[&lsquo;database&rsquo;]
  username  = db_config[&lsquo;username&rsquo;]
  password  = db_config[&lsquo;password&rsquo;]</p>

<p>  args = []</p>

<p>  args.push &ldquo;host=#{host}&rdquo; if host
  args.push &ldquo;port=#{port}&rdquo; if port
  args.push &ldquo;dbname=#{database}&rdquo; if database
  args.push &ldquo;user=#{username}&rdquo; if username
  args.push &ldquo;password=#{password}&rdquo; if password</p>

<p>  &ldquo;PG:\&rdquo;#{args.join(&lsquo; &rsquo;)}\&ldquo;&rdquo;
end
```</p>

<h3>Stiching It Togther</h3>

<p>The entire command is constructed as follows:</p>

<p>```ruby
def command
  [</p>

<pre><code># the command name
'ogr2ogr',

# output geojson to stdout
'-f', 'GeoJSON', '/vsistdout/',

# postgres db config
conn_str,

# SQL statement to run
'-sql', "\"#{sql}\""
</code></pre>

<p>  ].join(&lsquo; &rsquo;)
end
```</p>

<h3>Running the command</h3>

<p>Run the generated command as a sub-process and get the STDOUT as an IO object.</p>

<p><code>ruby
def run
  IO.popen(command)
end
</code></p>

<p>Yay! Fast GeoJSON rendering!</p>

<h2>Rails Live Streaming</h2>

<p>You can read to the end of the IO stream and just send it off, but where is the fun? Let&rsquo;s stream the response back with HTTP 1.1 chunked encoding in a 4KB buffer! This increase response time and reduces memory footprint. Sweet deal!</p>

<h3>Add Chunked Enocding Support to Rails</h3>

<p>In order to support chunked encoding, we need to add this into our <code>config/application.rb</code> file:</p>

<p>```ruby</p>

<h1>config/application.rb</h1>

<p>module MyApp
  class Application</p>

<pre><code>#
# other rails application configurations
#
# ...

# Add Rack::Chunked before Rack::Sendfile
config.middleware.insert_before(Rack::Sendfile, Rack::Chunked)
</code></pre>

<p>  end
end
```</p>

<p>This inserts the <code>Rack::Chunked</code> middleware into the correct position of Rails middleware stack to support HTTP 1.1 chunked encoding.</p>

<h3>Aligning Streaming Interfaces</h3>

<h4>ActionController::Metal Streaming Interface</h4>

<p>Since I was building an API, I used <code>ActionController::Metal</code> instead of <code>ActionController::Base</code> with is a much smaller abstraction for <code>Rack</code> interface. The response body is set by using <code>#response_body=</code> method.</p>

<p>In order to use chunked encoding, We need to give <code>#response_body=</code> method an object that responds to <code>#each</code> and optionally <code>#close</code>, where <code>#each</code> will yield data in chunks, and <code>#close</code> is required if you need to close underlaying file descriptors or any cleanup operations. The goal is to wrap the <code>ogr2ogr</code> IO stream object to something that <code>#response_body=</code> expects.</p>

<h4>Ruby IO Interface</h4>

<p>Ruby <a href="http://www.ruby-doc.org/core-2.1.2/IO.html">IO</a> class already implements <code>#each</code> and <code>#close</code> methods. However the behavior of <code>#each</code> is not ideal in our use case. <code>IO#each</code> is an alias to <code>IO#each_line</code> which yields data line by line. <code>ogr2ogr</code> generates the GeoJSON in a single gigantic line. We need to split each chunk by byte size instead of by line.</p>

<p>Luckily, Ruby IO offers a nice method called <code>#readpartial</code> that takes a <code>maxlen</code> argument. This argument tells the IO stream how many bytes read. When invoked, the IO object will wait until enough bytes are available and return a string with the requested byte size (or less if end of the stream is reached, or raises EOFError).</p>

<h3>Chunking IO Stream</h3>

<p>With the long explanation above, we are now equipped with enough knowledge to create a wrapper to handle the chunking. It turns out pretty simple:</p>

<p>```ruby</p>

<h1>lib/chunked_stream.rb</h1>

<p>#</p>

<h1>ChunkedStream</h1>

<p>#</p>

<h1>It takes any IO object and reads the output in chunks.</h1>

<h1>It implements #each and #close and is designed to be used</h1>

<h1>to interface with Rails Live Stream or Rack::Chunked</h1>

<p>#
class ChunkedStream
  CHUNK_SIZE = 1024 * 4 # read in 4 kB size</p>

<p>  attr_reader :io, :chunk_size</p>

<p>  def initialize(io, chunk_size = CHUNK_SIZE)</p>

<pre><code>@io = io
@chunk_size = chunk_size
</code></pre>

<p>  end</p>

<p>  def each</p>

<pre><code>while chunk = io.readpartial(chunk_size)
  yield chunk
end
</code></pre>

<p>  rescue EOFError => e</p>

<pre><code>nil
</code></pre>

<p>  ensure</p>

<pre><code>close
</code></pre>

<p>  end</p>

<p>  def close</p>

<pre><code>io.close
</code></pre>

<p>  end
end
```</p>

<p>Now we have all the Lego pieces in place! let&rsquo;s put them in good use:</p>

<p>```ruby</p>

<h1>In your ActionController::Metal sub class</h1>

<h1>that generate the geojson</h1>

<p>#
def index
  scope = Region.all</p>

<p>  io = GeojsonCommand.new(scope).run</p>

<p>  self.status = :ok
  self.content_type = &lsquo;application/json&rsquo;
  self.response_body = ChunkedStream.new(io)
end
```</p>

<h3>Bonus: Compressed Chunked Encoding</h3>

<p>Somewhere during the research, I came across <a href="http://robots.thoughtbot.com/content-compression-with-rack-deflater">Rack::Deflater</a>. This is a middleware that checks for <code>Accept-Encoding</code> in request headers, and compresses your response on the fly!</p>

<p>The trick to get it working with <code>Rack::Chunked</code> is to insert this middleware right after <code>Rack::Chunked</code>. This is because we need to compress each data chunk, instead of the entire request.</p>

<p>To enable compression, all you need to do is add the following line in your <code>config/application.rb</code>:</p>

<p><code>ruby
config.middleware.insert_after(Rack::Chunked, Rack::Deflater)
</code></p>

<h2>Some Caveats</h2>

<p>Although the speed has been significantly improved. There are still some caveats to watch for.</p>

<h3>ogr2ogr sub-process error handling</h3>

<p>Currently the code assumes <code>ogr2ogr</code> sub-process can run successfully all the time, and we all know this is unrealistic. A better error handling process is needed to make it more solid.</p>

<h3>Large RPM</h3>

<p>Under high load, many <code>ogr2ogr</code> sub-processes will be created. The behavior under this situation is unknown. But this is an internal API with very light traffic. Thus this is not a concern for me (yet). I think some kind of in-process worker pool and monitor could mostly solve this issue, but I have no plan to implement this for now.</p>

<h2>Go Try It Out!</h2>

<p>Try this method is you are facing similar issues, and let me know your results. Hopefully this has been helpful for you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dm-is-slug 0.10.2 Now on GemCutter]]></title>
    <link href="http://aq1018.github.io/blog/2010/02/08/dm-is-slug-is-now-on-gem-cutter/"/>
    <updated>2010-02-08T22:05:00-08:00</updated>
    <id>http://aq1018.github.io/blog/2010/02/08/dm-is-slug-is-now-on-gem-cutter</id>
    <content type="html"><![CDATA[<p>I created a <a href="http://datamapper.org">datamapper</a> plugin called
<a href="http://github.com/aq1018/dm-is-slug">dm-is-slug</a> in 2009 to
ease the pain of handling permalinks or url slugs in my
<a href="http://www.merbivore.com%20project">merb</a>.</p>

<p>So, I spent some time merging commits from <a href="http://github.com/cheba">Alex Mankuta</a>
whom has fixed many bugs, and now it works much better. Thanks, cheba!</p>

<p>I also added support for <a href="http://rubyforge.org/projects/unidecode/">unidecoding</a>,
which allows you to turn strings like <em>&ldquo;你好&rdquo;</em> into <em>&ldquo;ni-hao&rdquo;</em>.</p>

<p>Lastly, the gem is pushed to <a href="http://gemcutter.org">gemcutter</a>
for easy gem install. That didn&rsquo;t take too long! :)</p>

<p><strong><a href="http://github.com/aq1018/dm-is-slug">Find out how to use dm-is-slug on github!</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redcloth Ate My notextile Tag]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/07/redcloth-ate-my-notextile/"/>
    <updated>2009-04-07T00:43:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/07/redcloth-ate-my-notextile</id>
    <content type="html"><![CDATA[<p>While playing with textile and UltraViolet in Webby,
I found textile is re-rendering my UltraViolet generated HTML contents
disregarding &lt;notextile> tags.The problem is with UltraVilet versions
4.1.1 to 4.1.9 has ignored this tag somehow.There is even a
<a href="http://jgarber.lighthouseapp.com/projects/13054/tickets/119-notextile-blocks-included-in-following-paragrap">bug ticket</a> about it.</p>

<p>The solution?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem uninstall RedCloth -a
</span><span class='line'>sudo gem install RedCloth -v=4.1.0</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This installs RedCloth version 4.1.0 which doesn&rsquo;t eat
your <code>&lt;notextile&gt;</code> tags and behave correctly for me.
Next I just did a <code>webby rebuild</code> and everything worked out for me!</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Blog Tags to Webby]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/06/adding-blog-tags-using-webby/"/>
    <updated>2009-04-06T19:12:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/06/adding-blog-tags-using-webby</id>
    <content type="html"><![CDATA[<p>The blog now looks better and better, but it is still missing a key feature &mdash; tags.</p>

<p>Let&rsquo;s bust it out! Here is my plan:</p>

<ul>
<li>Adding a tags attribute under each blog&rsquo;s meta data</li>
<li>Make a helper that reads each blog and count the occurance of each tag</li>
<li>Make a partial that links to each tags</li>
<li>Make a rake task that auto generates tags folder</li>
</ul>


<h2>Adding a tags attribute under each blog&rsquo;s meta data</h2>

<p> This is easy, just open up a post and add a <code>tags</code> attribute to the meta data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example post.txt </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">title</span>         <span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">Adding Blog Tags using Webby</span>
</span><span class='line'><span class="l-Scalar-Plain">created_at</span>    <span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">2009-04-06 19:12:00.343030 +08:00</span>
</span><span class='line'><span class="l-Scalar-Plain">blog_post</span>     <span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">filter</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; erb</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; textile&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;h1&gt;Add some tags for this post&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;tags</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; ruby</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; webby</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Make tags helper</h2>

<p>All I need to do is to make a tags helper module that does the counting for me,
and register it with Webby. Here is the code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lib/tags_helper.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">TagsHelper</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # find all blog posts</span>
</span><span class='line'><span class="sr">  def posts(limit=:all, find_options=nil)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:in_directory</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;articles&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:recursive</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:blog_post</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:sort_by</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;created_at&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:reverse</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">find_options</span><span class="p">)</span> <span class="k">if</span> <span class="n">find_options</span>
</span><span class='line'><span class="o">::</span><span class="ss">Webby</span><span class="p">:</span><span class="ss">:Resources</span><span class="o">.</span><span class="n">pages</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">limit</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def tags_hash&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="vi">@tags_hash</span> <span class="k">if</span> <span class="vi">@tags_hash</span>
</span><span class='line'><span class="vi">@tags_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">posts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@tags_hash</span><span class="o">[</span><span class="n">tag</span><span class="o">]</span> <span class="o">||=</span><span class="mi">0</span>
</span><span class='line'>    <span class="vi">@tags_hash</span><span class="o">[</span><span class="n">tag</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">tags</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@tags_hash</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">posts_with_tag</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">limit</span><span class="o">=</span><span class="ss">:all</span><span class="p">,</span> <span class="n">find_options</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;posts(limit, find_options) do |post|</span>
</span><span class='line'><span class="sr">  post.tags &amp;amp;&amp;amp; post.tags.include?(tag)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">Webby</span><span class="p">:</span><span class="ss">:Helpers</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="no">TagsHelper</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>posts</code> is a handy little short cut for getting all blog posts,
much shorter to type. You can also pass in the <code>limit</code>,
and <code>find_options</code> to customize your find. Example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>finding first 10 posts in blogs dir, and sorted in descending chronological order. </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">posts</span> <span class="mi">10</span><span class="p">,</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  :in_directory =&amp;gt; &#39;blogs&#39;,</span>
</span><span class='line'><span class="sr">  :sort_by      =&amp;gt; &#39;created_at&#39;,</span>
</span><span class='line'><span class="sr">  :reverse      =&amp;gt; true</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>tags_hash</code> returns a hash with tag name and occurance as the key and value.</p>

<p><code>posts_with_tag</code> finds all the blog posts related to a tag.</p>

<h2>Make a partial</h2>

<p>Now that we have the helper, we can make a partial that displays the tags. I made it in HAML:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span><em>partials/</em>tags.haml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%ul</span>
</span><span class='line'>  <span class="c">/ sort tags in alphabetical order,</span>
</span><span class='line'>  <span class="c">/ and then generate links for each tag</span>
</span><span class='line'>  <span class="p">-</span><span class="n">tags_hash</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;%li
</span><span class='line'>  <span class="nt">%a</span><span class="p">{</span><span class="ss">:href</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;/tags/</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot;}= tag
</span><span class='line'>  <span class="p">==</span>(<span class="si">#{</span><span class="n">tags_hash</span><span class="o">[</span><span class="n">tag</span><span class="o">]</span><span class="si">}</span>)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can see the partial in effect on the lower right side of the page in footer.
This is basic and nothing fancy&hellip;</p>

<h2>Make a Rake Task</h2>

<p>Now the tags are in place, we want actually display the tags pages.
We make a new rake task to generate all the tags page for us.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tags.rake </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">lib</span><span class="o">/</span><span class="n">tags</span><span class="o">.</span><span class="n">rb</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">TagsHelper</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:tags</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">auto</span> <span class="n">generate</span> <span class="n">all</span> <span class="n">tags</span> <span class="n">page</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:generate</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;::Webby.load_files</span>
</span><span class='line'><span class="sr">tags_hash.keys.each do |tag|</span>
</span><span class='line'><span class="sr">  dir = Webby.site.tags_dir</span>
</span><span class='line'><span class="sr">  page = File.join(dir, File.basename(tag))</span>
</span><span class='line'><span class="sr">  page =</span>
</span><span class='line'><span class="sr">    Webby::Builder.create(</span>
</span><span class='line'><span class="sr">      page,</span>
</span><span class='line'><span class="sr">      :from =&amp;gt; &quot;</span><span class="si">#{</span><span class="no">Webby</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">template_dir</span><span class="si">}</span><span class="sr">/</span><span class="n">tags</span><span class="o">/</span><span class="n">generate</span><span class="o">.</span><span class="n">erb</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2">      :locals =&amp;gt; {:tag =&amp;gt; tag, :directory =&amp;gt; dir}</span>
</span><span class='line'><span class="s2">    )</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  desc &amp;ldquo;remove all tags page&amp;rdquo;</span>
</span><span class='line'><span class="s2">  task :remove do&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;rm_r Webby.site.content_dir + &quot;</span><span class="o">/</span><span class="s2">&quot; + Webby.site.tags_dir</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  desc &amp;ldquo;regenerate all tags page&amp;rdquo;</span>
</span><span class='line'><span class="s2">  task :regenerate =&gt; [:remove, :generate]</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You will also need the corresponding <code>templates/tags/generate.erb</code>,
which you can find in <a href="http://github.com/aq1018/aaron-blog/">my github account</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Blog is Made using Webby]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/06/this-blog-is-made-using-webby/"/>
    <updated>2009-04-06T00:51:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/06/this-blog-is-made-using-webby</id>
    <content type="html"><![CDATA[<p>After a few days of work, I finally finished the layout for my blog.
During the construction of this blog, I wanted to use a very light framework.
Being mainly a Ruby On Rails developer I found a ruby framework called
<a href="http://webby.rubyforge.org/">Webby</a> that works perfectly with my requirements.</p>

<p>From the Webby describes itself as:</p>

<blockquote><p>Webby is a fantastic little website management system.
It would be called a content management system if it were a bigger kid.
But, it’s just a runt with a special knack for transforming text.
And that’s really all it does – manages the legwork of turning text into something else,
an ASCII Alchemist if you will."</p></blockquote>

<p>Sounds nice?</p>

<p>It supports ERB, haml, sass, Textile, Markdown and a set of other
arsenels you can use at your disposal. Another reason I choose Webby
is because it supports <a href="http://ultraviolet.rubyforge.org/">UltraViolet</a>
which comes in handy when you need to demonstrate a few lines of code.
Even though it also supports <a href="http://coderay.rubychan.de/">CodeRay</a>,
but I much perfer UltraViolet as it supports a lot more
css hightlighting templates and languages.</p>

<p>Another highlight of Webby is that it uses A CSS framework called
<a href="http://code.google.com/p/blueprintcss/">BluePrint</a>This little CSS
framework makes website layout a breeze. Plus it has a powerful
customization utility that can generate custom sized grid with
meaningful class names.</p>

<h2>What about commenting?</h2>

<p>As Maxime once commented about my idea of using Webby to generate a static Blog:</p>

<blockquote><p>&ldquo;A blog without comments aint a blog!&rdquo;</p></blockquote>

<p>Sure, you&rsquo;ve got a point! My answer to this problem is <a href="http://disqus.com/">Disqus</a>.
It provides a JavaScript Widget that handles all the blog comments for you.
No more custom coding for comments, wrestling with SPAM, etc.
Just drop in their code, and sit and relax.
You&rsquo;ve got a powerful commenting system on your blog already! Sweet&hellip;</p>

<h2>Lastly, a Gift if you care</h2>

<p>if the idea of making a blog with Webby sounds nice to you,
maybe you can give it a try as well!</p>

<p>The source of this blog is <a href="http://github.com/aq1018/aaron-blog">hosted</a>
on <a href="http://github.com/">GitHub</a>.</p>

<p>Anyways, it was a lot of fun playing around using this little powerful framework,
and through fun experiments, a blog is actually born! Life is beautiful&hellip;</p>
]]></content>
  </entry>
  
</feed>
