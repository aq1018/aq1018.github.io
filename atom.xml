<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AQ]]></title>
  <link href="http://aq1018.github.io/atom.xml" rel="self"/>
  <link href="http://aq1018.github.io/"/>
  <updated>2014-08-23T02:10:23-07:00</updated>
  <id>http://aq1018.github.io/</id>
  <author>
    <name><![CDATA[Aaron Qian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Streaming GeoJSON With GDAL, Rack::Chunked, and Rails Live Streaming]]></title>
    <link href="http://aq1018.github.io/blog/2014/08/22/streaming-geojson-with-gdal-rack-chunked-and-rails-live-streaming/"/>
    <updated>2014-08-22T22:02:45-07:00</updated>
    <id>http://aq1018.github.io/blog/2014/08/22/streaming-geojson-with-gdal-rack-chunked-and-rails-live-streaming</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>For you busy folks who just want it to work, here is the <a href="https://gist.github.com/aq1018/e3512f763d42ad8cf80b">gist</a>.</p>

<h2>Background</h2>

<p>A few weeks ago, I was at <a href="http://nationbuilder.com/">NationBuilder</a> building a <a href="http://geojson.org/">GeoJSON</a> API for organizers. The end goal for this project is to provide accurate political districting information through this API and exposes a map management interface for district updates.</p>

<h2>Application Architecture</h2>

<p>This application is built on top of the popular <a href="http://rubyonrails.org/">Ruby On Rails</a> framework, and uses <a href="http://postgis.net/">PostGIS</a> as geographic data storage backend. GeoJSON conversion is done by using <a href="https://github.com/rgeo/rgeo-geojson">rgeo-geojson</a> gem since it fits nicely with <a href="https://github.com/rgeo/activerecord-postgis-adapter">activerecord-postgis-adapter</a>.</p>

<h2>Performance Issues</h2>

<p>The application was initially running smoothly, but problems started to emerge when the generated GeoJSON data became larger over time. The API server would often time out, stop responding, or run out of memory when GeoJSON response size approached a couple MB under light load. As a result, map rendering became so slow and unstable, it was painful to use.</p>

<h3>Memory Bloat</h3>

<p>Our GeoJSON data was initially loaded from database by ActiveReocrd, and then converted into <code>RGeo::Geometry</code> objects. The entire dataset is buffered in memory. These objects are then converted into hashes with <code>rgeo-geojson</code>. These converted hashes represents takes up a lot of memory as well. Finally the resulting hashes are merged with other database properties and pushed on an array. All buffered in memory!</p>

<h3>Response Time</h3>

<p>The application spends the majority of its time converting <code>RGeo::Geometry</code> objects into GeoJSON hashes. The CPU will hit 100% and memory will steadily clime. Upon closer inspection, I found out that <code>rgeo-geojson</code> gem does the conversion entirely in Ruby! When the dataset gets too big, the browser or our proxy will either run out of patience and issue timeouts or our application process will have consumed so much memory it was killed by <a href="http://mmonit.com/monit/">monit</a>.</p>

<h3>Understanding Root Cause</h3>

<p>As all seasoned software engineers would do, I first analyzed the symptoms at hand and concluded the following root cause:</p>

<ul>
<li>GeoJSON rendering is too slow.</li>
<li>dataset buffering causes memory bloat.</li>
</ul>


<h2>Research, Research, Research!</h2>

<p>My initial effort was focused on solving the rendering speed issue. I know I cannot convert GeoJSON in ruby since ruby isn&rsquo;t exactly suitable for this kind of heavy duty data crunching when speed is a core requirement.</p>

<h3>The PostGIS route</h3>

<p>The immediate thought came to mind is to have PostGIS generating the GeoJSON for me, and I found out <a href="http://postgis.org/docs/ST_AsGeoJSON.html">st_asgeojson</a>. However, this doesn&rsquo;t solve my problem since I will have to convert the generated GeoJSON back into hashes and merge database properties. There&rsquo;s gotta be a better way!</p>

<h3>GDAL</h3>

<p>After some more research I found out a little commandline tool called <code>ogr2ogr</code> from the wonderful <a href="http://www.gdal.org/">GDAL</a> library. This tool can execute supplied SQL statements and convert the results into GeoJSON FeatureCollection. This is perfect!</p>

<p>Here is an example on how to use it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ogr2ogr -f GeoJSON /vsistdout/ \
</span><span class='line'>  "PG:host=&lt;host&gt; dbname=&lt;dbname&gt; user=&lt;user&gt; password=&lt;password&gt;" \
</span><span class='line'>  -sql "SELECT name, geom FROM regions LIMIT 100"</span></code></pre></td></tr></table></div></figure>


<p>The <code>-f</code> flag indicates the output format, in this case I used GeoJSON. <code>/vsistdout/</code> means I want to output the geojson directly to STDOUT.</p>

<p>I gave it a spin, and the rendering speed is blazing fast! Ok, I&rsquo;m sticking with it!</p>

<h3>Interfacing with Rails</h3>

<p>In order to construct the command, I need to convert an ActiveRecord Scope into SQL statements.</p>

<h3>SQL Statement</h3>

<p>This is easy enough. <code>#to_sql</code> method on ActiveRecord scope will do the trick. If you are using Rails 4, don&rsquo;t forget to wrap this method inside <code>scope.connection.unprepared_statement</code> block to generate the full statement.</p>

<p>Something simple like this would do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sql</span>
</span><span class='line'>  <span class="vi">@scope</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">unprepared_statement</span> <span class="p">{</span> <span class="vi">@scope</span><span class="o">.</span><span class="n">to_sql</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>DB Connection String</h3>

<p>The next step is to fetch the Rails database configuration and convert it into the db connection string expected by <code>ogr2ogr</code>. Here is a snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">conn_str</span>
</span><span class='line'>  <span class="n">db_config</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">database_configuration</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">host</span>      <span class="o">=</span> <span class="n">db_config</span><span class="o">[</span><span class="s1">&#39;host&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">port</span>      <span class="o">=</span> <span class="n">db_config</span><span class="o">[</span><span class="s1">&#39;port&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">database</span>  <span class="o">=</span> <span class="n">db_config</span><span class="o">[</span><span class="s1">&#39;database&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">username</span>  <span class="o">=</span> <span class="n">db_config</span><span class="o">[</span><span class="s1">&#39;username&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">password</span>  <span class="o">=</span> <span class="n">db_config</span><span class="o">[</span><span class="s1">&#39;password&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;host=</span><span class="si">#{</span><span class="n">host</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">host</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;port=</span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">port</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;dbname=</span><span class="si">#{</span><span class="n">database</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">database</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;user=</span><span class="si">#{</span><span class="n">username</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">username</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;password=</span><span class="si">#{</span><span class="n">password</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">password</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;PG:</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Stiching It Togther</h3>

<p>The entire command is constructed as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">command</span>
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="c1"># the command name</span>
</span><span class='line'>    <span class="s1">&#39;ogr2ogr&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># output geojson to stdout</span>
</span><span class='line'>    <span class="s1">&#39;-f&#39;</span><span class="p">,</span> <span class="s1">&#39;GeoJSON&#39;</span><span class="p">,</span> <span class="s1">&#39;/vsistdout/&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># postgres db config</span>
</span><span class='line'>    <span class="n">conn_str</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># SQL statement to run</span>
</span><span class='line'>    <span class="s1">&#39;-sql&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">sql</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Running the command</h3>

<p>Run the generated command as a sub-process and get the STDOUT as an IO object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yay! Fast GeoJSON rendering!</p>

<h2>Rails Live Streaming</h2>

<p>You can read to the end of the IO stream and just send it off, but where is the fun? Let&rsquo;s stream the response back with HTTP 1.1 chunked encoding in a 4KB buffer! This increase response time and reduces memory footprint. Sweet deal!</p>

<h3>Add Chunked Enocding Support to Rails</h3>

<p>In order to support chunked encoding, we need to add this into our <code>config/application.rb</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/application.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">MyApp</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># other rails application configurations</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add Rack::Chunked before Rack::Sendfile</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">insert_before</span><span class="p">(</span><span class="ss">Rack</span><span class="p">:</span><span class="ss">:Sendfile</span><span class="p">,</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Chunked</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This inserts the <code>Rack::Chunked</code> middleware into the correct position of Rails middleware stack to support HTTP 1.1 chunked encoding.</p>

<h3>Aligning Streaming Interfaces</h3>

<h4>ActionController::Metal Streaming Interface</h4>

<p>Since I was building an API, I used <code>ActionController::Metal</code> instead of <code>ActionController::Base</code> with is a much smaller abstraction for <code>Rack</code> interface. The response body is set by using <code>#response_body=</code> method.</p>

<p>In order to use chunked encoding, We need to give <code>#response_body=</code> method an object that responds to <code>#each</code> and optionally <code>#close</code>, where <code>#each</code> will yield data in chunks, and <code>#close</code> is required if you need to close underlaying file descriptors or any cleanup operations. The goal is to wrap the <code>ogr2ogr</code> IO stream object to something that <code>#response_body=</code> expects.</p>

<h4>Ruby IO Interface</h4>

<p>Ruby <a href="http://www.ruby-doc.org/core-2.1.2/IO.html">IO</a> class already implements <code>#each</code> and <code>#close</code> methods. However the behavior of <code>#each</code> is not ideal in our use case. <code>IO#each</code> is an alias to <code>IO#each_line</code> which yields data line by line. <code>ogr2ogr</code> generates the GeoJSON in a single gigantic line. We need to split each chunk by byte size instead of by line.</p>

<p>Luckily, Ruby IO offers a nice method called <code>#readpartial</code> that takes a <code>maxlen</code> argument. This argument tells the IO stream how many bytes read. When invoked, the IO object will wait until enough bytes are available and return a string with the requested byte size (or less if end of the stream is reached, or raises EOFError).</p>

<h3>Chunking IO Stream</h3>

<p>With the long explanation above, we are now equipped with enough knowledge to create a wrapper to handle the chunking. It turns out pretty simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/chunked_stream.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ChunkedStream</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># It takes any IO object and reads the output in chunks.</span>
</span><span class='line'><span class="c1"># It implements #each and #close and is designed to be used</span>
</span><span class='line'><span class="c1"># to interface with Rails Live Stream or Rack::Chunked</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ChunkedStream</span>
</span><span class='line'>  <span class="no">CHUNK_SIZE</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">4</span> <span class="c1"># read in 4 kB size</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:io</span><span class="p">,</span> <span class="ss">:chunk_size</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">chunk_size</span> <span class="o">=</span> <span class="no">CHUNK_SIZE</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@io</span> <span class="o">=</span> <span class="n">io</span>
</span><span class='line'>    <span class="vi">@chunk_size</span> <span class="o">=</span> <span class="n">chunk_size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">chunk</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">readpartial</span><span class="p">(</span><span class="n">chunk_size</span><span class="p">)</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">chunk</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">EOFError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="k">ensure</span>
</span><span class='line'>    <span class="n">close</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">close</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have all the Lego pieces in place! let&rsquo;s put them in good use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># In your ActionController::Metal sub class</span>
</span><span class='line'><span class="c1"># that generate the geojson</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="n">scope</span> <span class="o">=</span> <span class="no">Region</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">io</span> <span class="o">=</span> <span class="no">GeojsonCommand</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">scope</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="ss">:ok</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s1">&#39;application/json&#39;</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">response_body</span> <span class="o">=</span> <span class="no">ChunkedStream</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bonus: Compressed Chunked Encoding</h3>

<p>Somewhere during the research, I came across <a href="http://robots.thoughtbot.com/content-compression-with-rack-deflater">Rack::Deflater</a>. This is a middleware that checks for <code>Accept-Encoding</code> in request headers, and compresses your response on the fly!</p>

<p>The trick to get it working with <code>Rack::Chunked</code> is to insert this middleware right after <code>Rack::Chunked</code>. This is because we need to compress each data chunk, instead of the entire request.</p>

<p>To enable compression, all you need to do is add the following line in your <code>config/application.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">insert_after</span><span class="p">(</span><span class="ss">Rack</span><span class="p">:</span><span class="ss">:Chunked</span><span class="p">,</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Deflater</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Some Caveats</h2>

<p>Although the speed has been significantly improved. There are still some caveats to watch for.</p>

<h3>ogr2ogr sub-process error handling</h3>

<p>Currently the code assumes <code>ogr2ogr</code> sub-process can run successfully all the time, and we all know this is unrealistic. A better error handling process is needed to make it more solid.</p>

<h3>Large RPM</h3>

<p>Under high load, many <code>ogr2ogr</code> sub-processes will be created. The behavior under this situation is unknown. But this is an internal API with very light traffic. Thus this is not a concern for me (yet). I think some kind of in-process worker pool and monitor could mostly solve this issue, but I have no plan to implement this for now.</p>

<h2>Go Try It Out!</h2>

<p>Try this method is you are facing similar issues, and let me know your results. Hopefully this has been helpful for you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detecting Backone.View Memory Leaks]]></title>
    <link href="http://aq1018.github.io/blog/2014/05/11/detecting-backone-dot-view-memory-leaks/"/>
    <updated>2014-05-11T22:09:38-07:00</updated>
    <id>http://aq1018.github.io/blog/2014/05/11/detecting-backone-dot-view-memory-leaks</id>
    <content type="html"><![CDATA[<p><strong>Edit</strong>: I have packaged it into
<a href="https://github.com/aq1018/Backbone.LeakChecker">backbone.leakchecker</a>. Happy leak hunting!</p>

<p>Do you think you write good Backbone.js code? Are you sure your view is not
leaking memory? Are you confident that you properly disposed all your views
by calling <code>view.remove()</code>? Are you sure didn&rsquo;t even miss one of them?</p>

<p>No worries, I&rsquo;ve got your back. : )</p>

<p>Just include <code>leaky-registry.js</code> before you load and initialize your Backbone app. It
will monitor the life cycle of every <code>Backbone.View</code> and report any possible
leaky views periodically to your browser console screen.</p>

<div><script src='https://gist.github.com/bca960d6124a76db63d0.js?file=leaky-registry.js'></script>
<noscript><pre><code>/*globals $*/

var _ = require(&#39;underscore&#39;);

function LeakyRegistry(options) {
  this.initialize(options);
}

LeakyRegistry.DEFAULT_OPTIONS = {
  interval: 5000,
  gc: false
};

_.extend(LeakyRegistry.prototype, {

  constructor: LeakyRegistry,

  initialize: function(options) {
    _.extend(this, this.sanitizeOptions(options));
    this.interval = 5000;
    this.clear();
    console.warn(&#39;**** LeakyRegistery - Your best pal for backbone view memory leak detection. ****&#39;);
  },

  sanitizeOptions: function(options) {
    var defaultOptions = LeakyRegistry.DEFAULT_OPTIONS;
    options = _.pick(options || {}, &#39;interval&#39;, &#39;gc&#39;);
    return _.extend({}, defaultOptions, options);
  },

  start: function() {
    this._handle = setInterval(this.reportLeaks.bind(this), this.interval);
  },

  get: function(cid) {
    return this.views[cid];
  },

  register: function(view) {
    if (this.views[view.cid]) {
      console.error(&#39;View&#39; + view.cid + &#39;is already registerd!&#39;);
      return;
    }

    this.views[view.cid] = view;
  },

  unregister: function(view) {
    if (!this.views[view.cid]) {
      console.error(&#39;View&#39; + view.cid + &#39;is not registerd!&#39;);
      return;
    }

    delete this.views[view.cid];
  },

  reportLeaks: function() {
    console.log(&#39;checking leaky views&#39;);
    _.each(this.views, function(view) {
      view.__warnIfLeaky();
    });

    if (this.gc) {
      this.gc();
    }
  },

  clear: function() {
    this.views = {};
  },

  stop: function() {
    clearInterval(this._handle);
  },

  gc: function() {
    _.each(this.views, function(view) {
      if (view.__isLeaky()) {
        view.remove();
      }
    });
  },

  dispose: function() {
    this.stop();
    this.clear();
  }
});

var leakyRegistry = global.leakyRegistry = window.leakyRegistry = new LeakyRegistry();


var Backbone = require(&#39;backbone&#39;);

function intercept(fn, after) {
  return function() {
    var val = fn.apply(this, arguments);
    after.apply(this);
    return val;
  };
}

// instrument Backbone.View#_configure
// since we cannot override the constructor itself
// the #_configure method invoked by the constructor is our next best choice
Backbone.View.prototype._configure = intercept(Backbone.View.prototype._configure, function() {
  leakyRegistry.register(this);
});

Backbone.View.prototype.remove = intercept(Backbone.View.prototype.remove, function() {
  this.__gced = true;
  console.trace(&#39;[&#39; + this.cid + &#39;] removed.&#39;, this);
  leakyRegistry.unregister(this);
});

Backbone.View.prototype.__warnIfLeaky = function() {
  if (this.__isLeaky()) {
    console.warn(&#39;[&#39; + this.cid + &#39;] is leaky.&#39;, this.el, this);
  }

  if(this.__isOnScreen()) {
    console.debug(&#39;[&#39; + this.cid + &#39;] still on screen.&#39;, this.el, this);
  }
};

Backbone.View.prototype.__isOnScreen = function() {
  return $.contains(document, this.el);
};

Backbone.View.prototype.__isLeaky = function() {
  // gc&#39;ed already
  if(this.__gced) {
    return false;
  }

  // not gc&#39;ed, but still attached to dom
  if (this.__isOnScreen()) {
    return false;
  }

  // not gc&#39;ed and not on dom
  // we think this might be a leaky view
  return true;
};

leakyRegistry.start();

</code></pre></noscript></div>


<p>Look Ma, No leaks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dm-is-slug 0.10.2 Now on GemCutter]]></title>
    <link href="http://aq1018.github.io/blog/2010/02/08/dm-is-slug-is-now-on-gem-cutter/"/>
    <updated>2010-02-08T22:05:00-08:00</updated>
    <id>http://aq1018.github.io/blog/2010/02/08/dm-is-slug-is-now-on-gem-cutter</id>
    <content type="html"><![CDATA[<p>I created a <a href="http://datamapper.org">datamapper</a> plugin called
<a href="http://github.com/aq1018/dm-is-slug">dm-is-slug</a> in 2009 to
ease the pain of handling permalinks or url slugs in my
<a href="http://www.merbivore.com%20project">merb</a>.</p>

<p>So, I spent some time merging commits from <a href="http://github.com/cheba">Alex Mankuta</a>
whom has fixed many bugs, and now it works much better. Thanks, cheba!</p>

<p>I also added support for <a href="http://rubyforge.org/projects/unidecode/">unidecoding</a>,
which allows you to turn strings like <em>&ldquo;你好&rdquo;</em> into <em>&ldquo;ni-hao&rdquo;</em>.</p>

<p>Lastly, the gem is pushed to <a href="http://gemcutter.org">gemcutter</a>
for easy gem install. That didn&rsquo;t take too long! :)</p>

<p><strong><a href="http://github.com/aq1018/dm-is-slug">Find out how to use dm-is-slug on github!</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updates on Inspec - Javascript BDD Framework]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/24/updates-on-inspec-javascript-bdd-framework/"/>
    <updated>2009-04-24T22:37:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/24/updates-on-inspec-javascript-bdd-framework</id>
    <content type="html"><![CDATA[<p><em>Update: Due to lack of interest and time, Inspec is no longer maintained.
<a href="http://visionmedia.github.com/jspec/">jSpec</a> has become more complete since this post,
and I would recommend using <a href="http://visionmedia.github.com/jspec/">jSpec</a> instead.</em></p>

<p>For the past two weeks, a lot of improvements has been done for
<a href="http://github.com/aq1018/inspec">Inspec</a>, here is the list:</p>

<ul>
<li>Better scoping / sandboxing</li>
<li>Support for <a href="http://www.mozilla.org/rhino/">Rhino</a>, <a href="http://www.mozilla.org/js/spidermonkey/">SpiderMonkey</a>, <a href="http://ajaxian.com/archives/johnson-wrapping-javascript-in-a-loving-ruby-embrace-and-arax">Johnson</a> and <a href="http://en.wikipedia.org/wiki/Windows_Script_Host">WSCript</a></li>
<li>Tested to work with IE7, Firefox 3, Chrome and Safari 3</li>
<li>Added a lot more specs to test <a href="http://github.com/aq1018/inspec">Inspec</a></li>
<li>Fixed a bug where cascading before / after blocks not getting the correct scoping / sandboxing</li>
<li>Changed BDD syntax a bit to be compatible with <a href="http://github.com/nkallen/screw-unit/tree/master">Screw.Unit</a></li>
<li>Shamelessly stole all matchers from <a href="http://github.com/nkallen/screw-unit/tree/master">Screw.Unit</a></li>
<li>Added the following matchers:

<ul>
<li><code>beA</code>  &ndash; instanceof test</li>
<li><code>throwError</code> &ndash; takes an function, and see if it throws an error</li>
<li><code>respondTo</code> &ndash; test if an object has a function</li>
<li><code>have</code> &ndash; see if an object or array contains something</li>
</ul>
</li>
</ul>


<p>I&rsquo;m working on some <strong>advanced features</strong> that requires some pretty big structural
changes right now. They are:</p>

<ul>
<li>Support for multiple definition of same behaviors.</li>
<li>Support for multiple definition of before / after blocks.</li>
<li>Redo shared example groups ( Allows for sharing local scope variables inside shared example groups)</li>
</ul>


<p>I plan to finish this feature while I&rsquo;m taking a business trip to Boston this coming Sunday.</p>

<p>For future, the plan follows:</p>

<ul>
<li>Spec, spec spec, 100% coverage require!</li>
<li>Extract and improve rendering logic from HTMLReporter to HTMLReporter.FlatFormatter</li>
<li>Implement <code>HTMLReporter.NestedFormater</code></li>
<li>Implement <code>HTMLReporter.CompactFormater</code></li>
<li>Implement <code>ConsoleReporter.FlatFormatter</code></li>
<li>Implement <code>ConsoleReporter.NestedFormater</code></li>
<li>Implement <code>ConsoleReporter.CompactFormater</code></li>
<li>Implement options for choose formatters, need to consider extending</li>
<li>Add statistics functionality to Reporter Class</li>
<li>Test on different browsers</li>
<li>Selective Behavior Execution support</li>
<li>Prioritize object printing with <code>toString()</code> if object has customized toString</li>
<li>Documentation</li>
<li>Make a wiki</li>
</ul>


<p>That&rsquo;s a lot of stuff to complete!
If anyone interested please <a href="http://github.com/aq1018/inspec">fork Inspec</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspec - Yet Another Javascript BDD Test Framework]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/13/inspec-yet-another-javascript-bdd-test-framework/"/>
    <updated>2009-04-13T21:14:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/13/inspec-yet-another-javascript-bdd-test-framework</id>
    <content type="html"><![CDATA[<p><em>Update: Due to lack of interest and time, Inspec is no longer maintained.
<a href="http://visionmedia.github.com/jspec/">jSpec</a> has become more complete since this post,
and I would recommend using <a href="http://visionmedia.github.com/jspec/">jSpec</a> instead.</em></p>

<h3>The &ldquo;Why&rdquo; Question</h3>

<p>Why? You ask, we already have BDD Frameworks such as<a href="http://github.com/nkallen/screw-unit/tree/master">Screw.Unit</a>,
<a href="http://visionmedia.github.com/jspec/">jSpec</a>, and <a href="http://jania.pe.kr/aw/moin.cgi/JSSpec">JSSepc</a>, you want to make <em>another</em> Javascript BDD Test Framework?</p>

<p>To answer your question, you can take a look at my previous article
So, please <a href="http://aq1018.github.io/blog/2009/04/12/javascript-bdd-test-frameworks-compared">read it</a> if you haven&rsquo;t done so.</p>

<p>Now, if you are still with me after finish reading my article,
allow me to introduce you a new BDD Test Framework that doesn&rsquo;t suck.</p>

<h2>Introducing <a href="http://github.com/aq1018/inspec/">Inspec</a></h2>

<p>While coding up <a href="http://github.com/aq1018/inspec/">Inspec</a>, I was trying to fulfill the following features:</p>

<ul>
<li>Nested behaviors.</li>
<li>Shared behaviors. (aka. <code>it_should_behave_like</code> in <a href="http://rsepc.info">RSepc</a>)</li>
<li>Framework agnostic. ( You can use it with <a href="http://jquery.com/">jQuery</a>,
<a href="http://www.prototypejs.org/">Prototype</a>, <a href="http://mootools.net/">Mootools</a>, <a href="http://developer.yahoo.com/yui/">YUI</a>,
or <a href="http://extjs.com/">ExtJS</a>. it&rsquo;s your choice. )</li>
<li>An elegent DSL.</li>
<li>No namespace pollution.</li>
<li>Able to run in browser, <a href="http://ajaxian.com/archives/johnson-wrapping-javascript-in-a-loving-ruby-embrace-and-arax">command-line</a>, and <a href="http://en.wikipedia.org/wiki/Server-side_JavaScript">server side</a></li>
<li>A cystal clear API that is easy to understand and extend</li>
</ul>


<p>Sound awesome! But how does it work?</p>

<p>Here is a small example:</p>

<figure class='code'><figcaption><span>some examples on how to use Inspe.</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Inspec&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">toBeTrue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should fail&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">not</span><span class="p">().</span><span class="nx">toBeTrue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should be pending&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;with a nested example group&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work as a nested example group&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="kc">false</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// W00t?? It&#39;s nesting a shared example group</span>
</span><span class='line'>  <span class="nx">itShouldBehaveLike</span><span class="p">(</span><span class="s2">&quot;a shared example group&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sharedExamplesFor</span><span class="p">(</span><span class="s2">&quot;a shared example group&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work as shared example&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">toBeTrue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Yes! Shared nested Example Groups!</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;with nested example groups in shared&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work as a nested example group in shared&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">toBeTrue</span><span class="p">();</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another example that uses more matchers:</p>

<figure class='code'><figcaption><span>example matchers.</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Matchers&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;TypeMatcher&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with String&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">aString</span> <span class="o">=</span> <span class="s2">&quot;abc&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">aString</span><span class="p">).</span><span class="nx">toBeType</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with Number&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">aNumber</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">aNumber</span><span class="p">).</span><span class="nx">toBeType</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with Object&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">anObject</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">anObject</span><span class="p">).</span><span class="nx">toBeType</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with Boolean&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">aBoolean</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">aBoolean</span><span class="p">).</span><span class="nx">toBeType</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with undefined&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">undefinedValue</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">undefinedValue</span><span class="p">).</span><span class="nx">toBeType</span><span class="p">(</span><span class="s2">&quot;undefined&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with function&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">aFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){};</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">aFunction</span><span class="p">).</span><span class="nx">toBeType</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;InstanceMatcher&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with String&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">aString</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">aString</span><span class="p">).</span><span class="nx">toBeA</span><span class="p">(</span><span class="nb">String</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with Number&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">aNumber</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">aNumber</span><span class="p">).</span><span class="nx">toBeA</span><span class="p">(</span><span class="nb">Number</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with a class&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){};</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toBeA</span><span class="p">(</span><span class="nx">Foo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with a sub-class&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="nx">Inspec</span><span class="p">.</span><span class="nx">Class</span><span class="p">.</span><span class="nx">extend</span><span class="p">({});</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toBeA</span><span class="p">(</span><span class="nx">Foo</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toBeA</span><span class="p">(</span><span class="nx">Inspec</span><span class="p">.</span><span class="nx">Class</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toBeA</span><span class="p">(</span><span class="nb">Object</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;ComparisonMatcher&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with toBeAtLeast&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nx">toBeAtLeast</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="mi">6</span><span class="p">).</span><span class="nx">toBeAtLeast</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with toBeAtMost&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nx">toBeAtMost</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nx">toBeAtMost</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with toBeGreaterThan&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="mi">6</span><span class="p">).</span><span class="nx">toBeGreaterThan</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nx">not</span><span class="p">().</span><span class="nx">toBeGreaterThan</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should work with toBeLessThan&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nx">toBeLessThan</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nx">not</span><span class="p">().</span><span class="nx">toBeLessThan</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;RegexMatcher&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should match correct string&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">emailRegex</span> <span class="o">=</span> <span class="sr">/^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="s2">&quot;abc@efg.com&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">email</span><span class="p">).</span><span class="nx">toMatch</span><span class="p">(</span><span class="nx">emailRegex</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should not match incorrect string&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">emailRegex</span> <span class="o">=</span> <span class="sr">/^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="s2">&quot;abc_efg.com&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">email</span><span class="p">).</span><span class="nx">not</span><span class="p">().</span><span class="nx">toMatch</span><span class="p">(</span><span class="nx">emailRegex</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What&rsquo;s working so far</h2>

<p>As this is still an early release
(Let&rsquo;s see, It is about 3 weeks old so far.
Let&rsquo;s call it version 0.0.1??),
most of the core features are already working.
Here is the list:</p>

<ul>
<li>Basic Matchers</li>
<li>Nested describes</li>
<li>Shared describes</li>
<li>Sandboxed Example Scope</li>
<li>Tested to work in FireFox</li>
<li>Basic HTML Reporter</li>
<li>Works with &ldquo;Rhino&rdquo;:rhino and &ldquo;Johnson&rdquo;:johnson</li>
<li>Basic Console Reporter for &ldquo;Rhino&rdquo;:rhino and &ldquo;Johnson&rdquo;:johnson</li>
</ul>


<h2>In The Near Future</h2>

<p>While <a href="http://github.com/aq1018/inspec/">Inspec</a> is now working with basic matchers,
here are a few things I&rsquo;d like to add:</p>

<ul>
<li>Better syntax and organization of matchers for easier extensions.
(Tempted to steal from <a href="http://github.com/nkallen/screw-unit/tree/master">Screw.Unit</a>)</li>
<li>More Matchers. (Makes everyone happy.)</li>
<li>Work on WScript environment.</li>
<li>Make sure compatibility with all major browsers. (Helps appricated)</li>
<li>Allow selective execution of Example groups / Examples.</li>
<li>Make a better HTML Reporter, that hooks into selective executions.</li>
<li>Better Documentations. (Helps appricated)</li>
<li>Better Error messages on Failure and Exception.</li>
<li>Package and maybe minify(why not?).</li>
<li>A LOT more rigid and concrete tests to reach 100% coverage.
(Also serve as uage examples, helps appricated)</li>
</ul>


<h2>For Developers</h2>

<p>I have been very busy with my date job lately,
and never have enough time to work on my own projects.
Any help is very much appricated. So if you are interested in developing <a href="http://github.com/aq1018/inspec/">Inspec</a>
together, just <a href="http://github.com/aq1018/inspec/">fork me</a>,make some improvements, rebase, push,
and shoot me a pull request. If you are a regular contributor,
your name will be in the co-author&rsquo;s list as well.</p>

<h2>Suggestions? Comments?</h2>

<p>While I primarily developed this for my own need.
I hope this will benefit everyone who has similiar needs.
So your suggestions and critics are very welcome.
Tell me what you like about it, what you don&rsquo;t like about it,
and how <a href="http://github.com/aq1018/inspec/">Inspec</a> can be improved. Sorry that there is nothing
like google group or irc or mailing list setup yet. You can leave a
comment here, and I will be notified automatically through email.
If this project grows bigger, I will setup a google group and an irc channel.
But for now, you can either leave a comment, or scroll down to the bottom
of the page, and my contact information is on the lower right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript BDD Test Frameworks Compared]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/12/javascript-bdd-test-frameworks-compared/"/>
    <updated>2009-04-12T21:58:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/12/javascript-bdd-test-frameworks-compared</id>
    <content type="html"><![CDATA[<p>Lately, I&rsquo;ve been trying to find a good JavaScript BDD style test framework,
and I have come across a few of them such as <a href="http://github.com/nkallen/screw-unit/tree/master">Screw.Unit</a>,
<a href="http://visionmedia.github.com/jspec/">jSpec</a>, and <a href="http://jania.pe.kr/aw/moin.cgi/JSSpec">JSSepc</a>. They all have their own unique set of features,
and are all very innovative. But I couldn&rsquo;t find a exact fit for my requirements.
While they are all unique in their own ways, and provide some rather innovative
approach to the BDD problem domain, they all have some drawbacks that
I find either not acceptable or not easy to use.</p>

<p>Let&rsquo;s have a little analysis on the strength and weakness of each
frameworks listed above. Ok, you must note that the strength and weakness
I describe is obviously a subjective opinion of my own,
that entirely pertains to my own need. You may find the weakness
I mentioned to be a strength in your case. Don&rsquo;t flame me about it!</p>

<h2>Screw.Unit</h2>

<p>Screw.Unit is the one I found to be the closest to my needs,
and I believe it is the most popular BDD JavaScript test framework
at the momenent of this writing.</p>

<h3>Things I like about Screw.Unit</h3>

<p>A key feature of Screw.Unit is the support for nested <code>describes</code> and
the cascading <code>before</code> (and @after@) behavior. For presentation,
it has a good HTML runner that generates good looking HTML pages
to present the test results. You can also create custom matchers
in a easy and declaritive manner to extend Screw.Unit.
Because adding member functions to <code>Object</code> is consider a bad practice,
the use of <code>foo.should be_true</code> cannot be done easily without polluting the
Object prototype. However they came up with an alternative DSL that
looks like this: <code>expect(foo).to(equal, true)</code></p>

<h3>Things I don&rsquo;t like about Screw.Unit</h3>

<p>However, there is a few things I don&rsquo;t like about it.</p>

<ul>
<li>No support for shared specs. (aka <code>it_should_behave_like</code> in <a href="http://rspec.info">RSpec</a>)</li>
<li>Does not support commandline (due to dependcy on jQuery, DOM, and <a href="http://http://github.com/nkallen/effen/tree/master">concrete Javascript</a></li>
<li>Does not support server-side javascript (Same reason above)</li>
</ul>


<h2>jSpec</h2>

<p>jSpec is probably the most innovative JavaScript BDD,
and sometimes I feel that it might be a bit too innovative&hellip;</p>

<h3>Things I like about jSpec</h3>

<p>In jSpec, you don&rsquo;t write true JavaScript, but a higher level DSL,
which later being parsed and converted to JavaScript and executed.
It also supports nested <code>describes</code> and <code>before</code>, <code>after</code> blocks.
It has a wealth of matchers, and has formatters that supports DOM,
console, and terminal. The size of the script is very small as well.</p>

<p>It is definitely worth checking out.</p>

<h3>Things I don&rsquo;t like about jSpec</h3>

<p><em>Update: jSpec now supports writing with plain JS and shared behaviors now.</em></p>

<p>First, doesn&rsquo;t support shared behaviors.</p>

<p>The DSL looks nice at first sight. In fact I almost mistook it as
RSpec test suits. But after careful analysis, I have a few doubts
about jSpec&rsquo;s DSL. First, from the source code, the DSL to JavaScript
transformation is done using a few lines of Regex only. I&rsquo;m afraid that
it might not work on edge cases. Next, I looked at the tests for the
Regex transformation, and I found that the tests are not very strict either.
Also, I think this makes error tracking rather difficult,
since the DSL is transformed, it is hard to figure out where the error is if
you run into some edge cases. I&rsquo;d rather write JavaScript and be at ease,
instead of write poorly supported FrankensteinScript, and have no clue where went wrong.</p>

<p>Another part I don&rsquo;t like about jSpec is the source code is rather cryptic.
I have to say the author of jSpec is a very smart person.
To me, his code is 50% recursive functional rocket science and 50% regex dark magic.
It took me a long time to decrypt how the code is working under the hood,
and I can&rsquo;t say I understood it 100%. This makes contributing and extending
very difficult for most busy programmers (including me) that just want to get the things done.</p>

<h2>JSSpec</h2>

<p>JSSepc is probably the oldest Framework that started to tackle the
BDD domain in JavaScript. The initial release is dated July 16, 2007.
Its features are relatively simple compare to above two frameworks.</p>

<h3>Things I like about jSpec</h3>

<p>JSSepc&rsquo;s source code is simple and clean, and relatively easy to extend.
It has very original syntax as well, Instead of using <code>expect(foo).to(equal, true)</code>,
its format is <code>value_of(foo).should().be_true()</code>, a bit less sweet&hellip;
However, it is the first (I think) to tackle BDD in JavaScript,
it is nice that they first invented this approach,and paved way for
newer frameworks to learn from. The HTML report is very nice too.
You can selectively run a set of suit right in the browser.</p>

<h3>Things I don&rsquo;t like about jSpec</h3>

<ul>
<li>It doesn&rsquo;t support nested <code>describe</code> blocks.</li>
<li>It doesn&rsquo;t support shared behaviors.</li>
<li>Not in active development. (Last commit was Dec. 2008)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redcloth Ate My Notextile Tag]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/07/redcloth-ate-my-notextile/"/>
    <updated>2009-04-07T00:43:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/07/redcloth-ate-my-notextile</id>
    <content type="html"><![CDATA[<p>While playing with textile and UltraViolet in Webby,
I found textile is re-rendering my UltraViolet generated HTML contents
disregarding &lt;notextile> tags.The problem is with UltraVilet versions
4.1.1 to 4.1.9 has ignored this tag somehow.There is even a
<a href="http://jgarber.lighthouseapp.com/projects/13054/tickets/119-notextile-blocks-included-in-following-paragrap">bug ticket</a> about it.</p>

<p>The solution?</p>

<figure class='code'><figcaption><span>console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem uninstall RedCloth -a
</span><span class='line'>sudo gem install RedCloth -v=4.1.0</span></code></pre></td></tr></table></div></figure>


<p>This installs RedCloth version 4.1.0 which doesn&rsquo;t eat
your <code>&lt;notextile&gt;</code> tags and behave correctly for me.
Next I just did a <code>webby rebuild</code> and everything worked out for me!</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Blog Tags to Webby]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/06/adding-blog-tags-using-webby/"/>
    <updated>2009-04-06T19:12:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/06/adding-blog-tags-using-webby</id>
    <content type="html"><![CDATA[<p>The blog now looks better and better, but it is still missing a key feature &mdash; tags.</p>

<p>Let&rsquo;s bust it out! Here is my plan:</p>

<ul>
<li>Adding a tags attribute under each blog&rsquo;s meta data</li>
<li>Make a helper that reads each blog and count the occurance of each tag</li>
<li>Make a partial that links to each tags</li>
<li>Make a rake task that auto generates tags folder</li>
</ul>


<h2>Adding a tags attribute under each blog&rsquo;s meta data</h2>

<p> This is easy, just open up a post and add a <code>tags</code> attribute to the meta data:</p>

<figure class='code'><figcaption><span>example post.txt </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">title</span>         <span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">Adding Blog Tags using Webby</span>
</span><span class='line'><span class="l-Scalar-Plain">created_at</span>    <span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">2009-04-06 19:12:00.343030 +08:00</span>
</span><span class='line'><span class="l-Scalar-Plain">blog_post</span>     <span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">filter</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">erb</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">textile</span>
</span><span class='line'><span class="c1"># Add some tags for this post</span>
</span><span class='line'><span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ruby</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">webby</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Make tags helper</h2>

<p>All I need to do is to make a tags helper module that does the counting for me,
and register it with Webby. Here is the code:</p>

<figure class='code'><figcaption><span>lib/tags_helper.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">TagsHelper</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># find all blog posts</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">posts</span><span class="p">(</span><span class="n">limit</span><span class="o">=</span><span class="ss">:all</span><span class="p">,</span> <span class="n">find_options</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:in_directory</span> <span class="o">=&gt;</span> <span class="s1">&#39;articles&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:recursive</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:blog_post</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:sort_by</span> <span class="o">=&gt;</span> <span class="s2">&quot;created_at&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:reverse</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>    <span class="n">options</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">find_options</span><span class="p">)</span> <span class="k">if</span> <span class="n">find_options</span>
</span><span class='line'>    <span class="o">::</span><span class="ss">Webby</span><span class="p">:</span><span class="ss">:Resources</span><span class="o">.</span><span class="n">pages</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">limit</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tags_hash</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@tags_hash</span> <span class="k">if</span> <span class="vi">@tags_hash</span>
</span><span class='line'>    <span class="vi">@tags_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">posts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>      <span class="n">post</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@tags_hash</span><span class="o">[</span><span class="n">tag</span><span class="o">]</span> <span class="o">||=</span><span class="mi">0</span>
</span><span class='line'>        <span class="vi">@tags_hash</span><span class="o">[</span><span class="n">tag</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">tags</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>    <span class="vi">@tags_hash</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">posts_with_tag</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">limit</span><span class="o">=</span><span class="ss">:all</span><span class="p">,</span> <span class="n">find_options</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">posts</span><span class="p">(</span><span class="n">limit</span><span class="p">,</span> <span class="n">find_options</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>      <span class="n">post</span><span class="o">.</span><span class="n">tags</span> <span class="o">&amp;&amp;</span> <span class="n">post</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Webby</span><span class="p">:</span><span class="ss">:Helpers</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="no">TagsHelper</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>posts</code> is a handy little short cut for getting all blog posts,
much shorter to type. You can also pass in the <code>limit</code>,
and <code>find_options</code> to customize your find. Example:</p>

<figure class='code'><figcaption><span>finding first 10 posts in blogs dir, and sorted in descending chronological order. </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">posts</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:in_directory</span> <span class="o">=&gt;</span> <span class="s1">&#39;blogs&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:sort_by</span>      <span class="o">=&gt;</span> <span class="s1">&#39;created_at&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:reverse</span>      <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>tags_hash</code> returns a hash with tag name and occurance as the key and value.</p>

<p><code>posts_with_tag</code> finds all the blog posts related to a tag.</p>

<h2>Make a partial</h2>

<p>Now that we have the helper, we can make a partial that displays the tags. I made it in HAML:</p>

<figure class='code'><figcaption><span>_partials/_tags.haml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%ul</span>
</span><span class='line'>  <span class="c">/ sort tags in alphabetical order,</span>
</span><span class='line'>  <span class="c">/ and then generate links for each tag</span>
</span><span class='line'>  <span class="p">-</span><span class="n">tags_hash</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>    <span class="nt">%li</span>
</span><span class='line'>      <span class="nt">%a</span><span class="p">{</span><span class="ss">:href</span><span class="o">=&gt;</span><span class="s2">&quot;/tags/</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span>&quot;}= tag
</span><span class='line'>      <span class="p">==</span>(<span class="si">#{</span><span class="n">tags_hash</span><span class="o">[</span><span class="n">tag</span><span class="o">]</span><span class="si">}</span>)
</span></code></pre></td></tr></table></div></figure>


<p>You can see the partial in effect on the lower right side of the page in footer.
This is basic and nothing fancy&hellip;</p>

<h2>Make a Rake Task</h2>

<p>Now the tags are in place, we want actually display the tags pages.
We make a new rake task to generate all the tags page for us.</p>

<figure class='code'><figcaption><span>tags.rake </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lib/tags.rb&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">TagsHelper</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:tags</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;auto generate all tags page&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:generate</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">::</span><span class="no">Webby</span><span class="o">.</span><span class="n">load_files</span>
</span><span class='line'>    <span class="n">tags_hash</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>      <span class="n">dir</span> <span class="o">=</span> <span class="no">Webby</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">tags_dir</span>
</span><span class='line'>      <span class="n">page</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">tag</span><span class="p">))</span>
</span><span class='line'>      <span class="n">page</span> <span class="o">=</span>
</span><span class='line'>        <span class="ss">Webby</span><span class="p">:</span><span class="ss">:Builder</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>          <span class="n">page</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Webby</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">template_dir</span><span class="si">}</span><span class="s2">/tags/generate.erb&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">:locals</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="n">tag</span><span class="p">,</span> <span class="ss">:directory</span> <span class="o">=&gt;</span> <span class="n">dir</span><span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;remove all tags page&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:remove</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">rm_r</span> <span class="no">Webby</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">content_dir</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="no">Webby</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">tags_dir</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;regenerate all tags page&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:regenerate</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:remove</span><span class="p">,</span> <span class="ss">:generate</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will also need the corresponding <code>templates/tags/generate.erb</code>,
which you can find in <a href="http://github.com/aq1018/aaron-blog/">my github account</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Blog Is Made Using Webby]]></title>
    <link href="http://aq1018.github.io/blog/2009/04/06/this-blog-is-made-using-webby/"/>
    <updated>2009-04-06T00:51:00-07:00</updated>
    <id>http://aq1018.github.io/blog/2009/04/06/this-blog-is-made-using-webby</id>
    <content type="html"><![CDATA[<p>After a few days of work, I finally finished the layout for my blog.
During the construction of this blog, I wanted to use a very light framework.
Being mainly a Ruby On Rails developer I found a ruby framework called
<a href="http://webby.rubyforge.org/">Webby</a> that works perfectly with my requirements.</p>

<p>From the Webby describes itself as:</p>

<blockquote><p>Webby is a fantastic little website management system.
It would be called a content management system if it were a bigger kid.
But, it’s just a runt with a special knack for transforming text.
And that’s really all it does – manages the legwork of turning text into something else,
an ASCII Alchemist if you will.&#8221;</p></blockquote>

<p>Sounds nice?</p>

<p>It supports ERB, haml, sass, Textile, Markdown and a set of other
arsenels you can use at your disposal. Another reason I choose Webby
is because it supports <a href="http://ultraviolet.rubyforge.org/">UltraViolet</a>
which comes in handy when you need to demonstrate a few lines of code.
Even though it also supports <a href="http://coderay.rubychan.de/">CodeRay</a>,
but I much perfer UltraViolet as it supports a lot more
css hightlighting templates and languages.</p>

<p>Another highlight of Webby is that it uses A CSS framework called
<a href="http://code.google.com/p/blueprintcss/">BluePrint</a>This little CSS
framework makes website layout a breeze. Plus it has a powerful
customization utility that can generate custom sized grid with
meaningful class names.</p>

<h2>What about commenting?</h2>

<p>As Maxime once commented about my idea of using Webby to generate a static Blog:</p>

<blockquote><p>&ldquo;A blog without comments aint a blog!&rdquo;</p></blockquote>

<p>Sure, you&rsquo;ve got a point! My answer to this problem is <a href="http://disqus.com/">Disqus</a>.
It provides a JavaScript Widget that handles all the blog comments for you.
No more custom coding for comments, wrestling with SPAM, etc.
Just drop in their code, and sit and relax.
You&rsquo;ve got a powerful commenting system on your blog already! Sweet&hellip;</p>

<h2>Lastly, a Gift if you care</h2>

<p>if the idea of making a blog with Webby sounds nice to you,
maybe you can give it a try as well!</p>

<p>The source of this blog is <a href="http://github.com/aq1018/aaron-blog">hosted</a>
on <a href="http://github.com/">GitHub</a>.</p>

<p>Anyways, it was a lot of fun playing around using this little powerful framework,
and through fun experiments, a blog is actually born! Life is beautiful&hellip;</p>
]]></content>
  </entry>
  
</feed>
